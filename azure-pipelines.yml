trigger: none  # No automatic triggers, only manual or external triggers

pr: none  # Disable pull request triggers

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  serviceName: 'TestAzurePipeline'  # Updated service name

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - checkout: self
      displayName: 'Checkout Code'

    - task: UseDotNet@2
      displayName: 'Install .NET Core SDK'
      inputs:
        packageType: 'sdk'
        version: '8.x'  # Specify the version you need

    - task: NuGetCommand@2
      displayName: 'Restore NuGet Packages'
      inputs:
        restoreSolution: '**/*.sln'

    - task: VSBuild@1
      displayName: 'Build Solution'
      inputs:
        solution: '**/*.sln'
        msbuildArgs: '/p:Configuration=$(buildConfiguration)'
        platform: 'Any CPU'
        configuration: '$(buildConfiguration)'

    - task: ArchiveFiles@2
      displayName: 'Publish to ZIP'
      inputs:
        rootFolderOrFile: '$(Build.BinariesDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Publish Artifact'
      artifact: 'drop'

- stage: Deploy
  jobs:
  - deployment: DeployToVM
    environment: 'Staging'  # Updated environment name
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          - task: PowerShell@2
            displayName: 'Install and Start TestAzurePipeline Service'
            inputs:
              targetType: 'inline'
              script: |
                $zipPath = "$(Pipeline.Workspace)\drop\$(Build.BuildId).zip"
                $destinationPath = "C:\testazure"
                
                # Create destination path if it does not exist
                if (-not (Test-Path -Path $destinationPath)) {
                  New-Item -Path $destinationPath -ItemType Directory
                }

                # Expand the archive
                Expand-Archive -Path $zipPath -DestinationPath $destinationPath -Force

                # Delete existing service if it exists
                if (Get-Service -Name $(serviceName) -ErrorAction SilentlyContinue) {
                  sc.exe delete $(serviceName)
                }

                # Create and start the new service
                sc.exe create $(serviceName) binPath= "$destinationPath\YourServiceExecutable.exe" start= auto
                sc.exe start $(serviceName)
