trigger: none  # No automatic triggers, only manual or external triggers

pr: none  # Disable pull request triggers

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  serviceName: 'TestAzurePipeline'  # Updated service name
  publishDirectory: '$(Build.ArtifactStagingDirectory)/publish'

stages:
- stage: Build
  jobs:
  - job: Build
    steps:
    - checkout: self
      displayName: 'Checkout Code'

    - task: UseDotNet@2
      displayName: 'Install .NET Core SDK'
      inputs:
        packageType: 'sdk'
        version: '8.x'  # Specify the version you need

    - task: NuGetCommand@2
      displayName: 'Restore NuGet Packages'
      inputs:
        restoreSolution: 'TransactionProcessor.HealthChecksUI/TransactionProcessor.HealthChecksUI.sln'

    - task: DotNetCoreCLI@2
      displayName: 'Publish .NET Core Application'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: 'TransactionProcessor.HealthChecksUI/TransactionProcessor.HealthChecksUI.sln'  # Specify the solution file
        arguments: '--configuration $(buildConfiguration) --output $(publishDirectory)'
        zipAfterPublish: false

    - task: ArchiveFiles@2
      displayName: 'Zip Published Output'
      inputs:
        rootFolderOrFile: '$(publishDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)_Published.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)_Published.zip
      displayName: 'Publish Artifact'
      artifact: 'published-drop'

- stage: Deploy
  jobs:
  - deployment: DeployToVM
    environment: 'Staging'  # Updated environment name
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: published-drop

          - task: PowerShell@2
            displayName: 'Install and Start TestAzurePipeline Service'
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "Deploying to machine: $env:COMPUTERNAME"
                
                $zipPath = "$(Pipeline.Workspace)\published-drop\$(Build.BuildId)_Published.zip"
                $destinationPath = "C:\testazure"
                Write-Host "Artifact path: $zipPath"
                
                # Create destination path if it does not exist
                if (-not (Test-Path -Path $destinationPath)) {
                  New-Item -Path $destinationPath -ItemType Directory
                }

                # Expand the archive
                Expand-Archive -Path $zipPath -DestinationPath $destinationPath -Force

                # Delete existing service if it exists
                if (Get-Service -Name $(serviceName) -ErrorAction SilentlyContinue) {
                  sc.exe delete $(serviceName)
                }

                # Create and start the new service
                sc.exe create $(serviceName) binPath= "$destinationPath\YourServiceExecutable.exe" start= auto
                sc.exe start $(serviceName)
